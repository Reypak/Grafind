package com.matt.firebasestorage;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.ScaleAnimation;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.storage.FirebaseStorage;
import com.squareup.picasso.Picasso;

public class ViewUpload extends AppCompatActivity {
    RecyclerView mBlogList;
    private FirebaseStorage mStorage;
    private DatabaseReference mDatabase;
    private FirebaseAuth mAuth;
    private static FirebaseUser user;
    private static String itemID;
    private LinearLayoutManager mLayoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_view_upload);
        mStorage = FirebaseStorage.getInstance();
        mDatabase = FirebaseDatabase.getInstance().getReference("Images");
        mDatabase.keepSynced(true);

        mBlogList = findViewById(R.id.recView);
        mBlogList.setHasFixedSize(true);

        // Here you modify your LinearLayoutManager
        mLayoutManager = new LinearLayoutManager(this);
        mLayoutManager.setReverseLayout(true);
        mLayoutManager.setStackFromEnd(true);
        mBlogList.setLayoutManager(mLayoutManager);

        CheckSession();
        getData();

    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    public void getData() {
        Query query = mDatabase.orderByChild("timestamp");
        FirebaseRecyclerAdapter<Blog, BlogViewHolder> firebaseRecyclerAdapter = new FirebaseRecyclerAdapter<Blog, BlogViewHolder>
                (Blog.class, R.layout.blog_row, BlogViewHolder.class, query) {
            @Override
            protected void populateViewHolder(BlogViewHolder blogViewHolder, final Blog blog, final int i) {
                // getting data into adapter
                blogViewHolder.setTitle(blog.getTitle());
                blogViewHolder.setDescription(blog.getDescription());
                blogViewHolder.setImageURL(getApplicationContext(), blog.getImageURL());

                blogViewHolder.itemView.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
//                        String URL = blog.getImageURL();
//                        String Title = blog.getTitle();
//                        String Description = blog.getDescription();
//                        Toast.makeText(view.getContext(), Title, Toast.LENGTH_SHORT).show();

                        itemID = getRef(i).getKey(); // storing key of data

                        Intent intent = new Intent(getApplication(), Post_Info.class);
                        intent.putExtra("itemKey", itemID);
                        startActivity(intent);
                    }
                });

                blogViewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View view) {
                        registerForContextMenu(view);
                        return false;
                    }
                });

                final FrameLayout btnLike = blogViewHolder.mView.findViewById(R.id.btnLike);
                btnLike.setOnClickListener(new View.OnClickListener() {
                    public DatabaseReference mDatabase;

                    @Override
                    public void onClick(View view) {
                        // bounce animation
                        ScaleAnimation animation = new ScaleAnimation(1, (float) 1.2, 1, (float) 1.2,
                                Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
                        animation.setDuration(300);
                        animation.setRepeatMode(Animation.REVERSE);
                        animation.setRepeatCount(3);

                        btnLike.startAnimation(animation);
                        btnLike.setBackground(ContextCompat.getDrawable(getApplicationContext(), R.drawable.ic_baseline_thumb_up_24));

                        String itemKey = getRef(i).getKey();

//                    mDatabase = FirebaseDatabase.getInstance().getReference("Images");
//                    mDatabase.child(itemID).child("Likes").child(user.getUid()).setValue("1");

//                        Toast.makeText(view.getContext(), itemKey, Toast.LENGTH_SHORT).show();
                    }
                });
            }
        };

        mBlogList.setAdapter(firebaseRecyclerAdapter);
    }

    public static class BlogViewHolder extends RecyclerView.ViewHolder {
        View mView;

        public BlogViewHolder(final View itemView) {
            super(itemView);
            mView = itemView;

            itemView.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    itemView.startAnimation(AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_out));
                    return false;
                }
            });

            itemView.startAnimation(AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_in));

            // animations for incoming frame layouts with text
            FrameLayout Frame1 = mView.findViewById(R.id.Frame1);
            FrameLayout Frame2 = mView.findViewById(R.id.Frame2);
            final ProgressBar progressBar = mView.findViewById(R.id.progress);

            // hide progressbar after 50sec
            progressBar.postDelayed(new Runnable() {
                @Override
                public void run() {
                    progressBar.setVisibility(View.GONE);
                }
            }, 40000);

            Animation SlideIn = AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_in);
            SlideIn.setStartOffset(850);
            Frame1.startAnimation(SlideIn);

            Animation SlideIn2 = AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_in);
            SlideIn2.setStartOffset(1000);
            Frame2.startAnimation(SlideIn2);

        }

        public void setTitle(String title) {
            TextView post_title = mView.findViewById(R.id.imagetitle);
            post_title.setText(title);
        }

        public void setDescription(String description) {
            TextView post_desc = mView.findViewById(R.id.description);
            post_desc.setText(description);
        }

        public void setImageURL(final Context ctx, String imageURL) {
            ImageView img = mView.findViewById(R.id.imageV);
            Picasso.with(ctx)
                    .load(imageURL)
                    .fit()
                    .centerCrop()
//                    .placeholder(R.drawable.ic_launcher_foreground)
                    .into(img);
        }
    }

    private void CheckSession() {
        mAuth = FirebaseAuth.getInstance();
        user = mAuth.getCurrentUser();

      /*  new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {

            }
        },2000);*/

        if (user != null) {

        } else {
            Intent intent = new Intent(getApplication(), LogIn.class);
            startActivity(intent);
            finish();
        }
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        menu.add(0, v.getId(), 0, "Info");
        menu.add(0, v.getId(), 0, "Add to Favorites");
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_account) {
            mAuth.signOut();
            Intent intent = new Intent(getApplication(), LogIn.class);
            startActivity(intent);
            finish();
            return true;
        } else if (id == R.id.action_about) {

            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}