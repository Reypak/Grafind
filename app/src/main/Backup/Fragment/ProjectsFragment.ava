package com.matt.firebasestorage.Fragments;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.matt.firebasestorage.Blog;
import com.matt.firebasestorage.Post_Info;
import com.matt.firebasestorage.R;
import com.squareup.picasso.Picasso;

public class ProjectsFragment extends Fragment {
    private RecyclerView mBlogList;
    private DatabaseReference mDatabase;
    private String itemID;
    private LinearLayoutManager mLayoutManager;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View rootView = inflater.inflate(R.layout.fragment_projects, container, false);

        mDatabase = FirebaseDatabase.getInstance().getReference("Images");
        mDatabase.keepSynced(true);

        mBlogList = rootView.findViewById(R.id.recView);
        mBlogList.setHasFixedSize(true);

        // Here you modify your LinearLayoutManager
        mLayoutManager = new GridLayoutManager(getActivity(), 2);
        mBlogList.setLayoutManager(mLayoutManager);


        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                getData();
                //Do something after 100ms
            }
        }, 1000);


        return rootView;
    }

    public void getData() {

        FirebaseAuth mAuth = FirebaseAuth.getInstance();
        FirebaseUser user = mAuth.getCurrentUser();

        Query query = mDatabase.orderByChild("userID").equalTo(user.getUid());
        FirebaseRecyclerAdapter<Blog, ProjectsFragment.BlogViewHolder> firebaseRecyclerAdapter = new FirebaseRecyclerAdapter<Blog, ProjectsFragment.BlogViewHolder>
                (Blog.class, R.layout.grid_item, ProjectsFragment.BlogViewHolder.class, query) {
            @Override
            protected void populateViewHolder(ProjectsFragment.BlogViewHolder blogViewHolder, final Blog blog, final int i) {
                // getting data into adapter
//                blogViewHolder.setTitle(blog.getTitle());
                blogViewHolder.setImageURL(getActivity(), blog.getImageURL());

                blogViewHolder.itemView.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        itemID = getRef(i).getKey(); // storing key of data

                        Intent intent = new Intent(getActivity(), Post_Info.class);
                        intent.putExtra("itemKey", itemID);
                        startActivity(intent);
                    }
                });

                blogViewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View view) {
                        registerForContextMenu(view);
                        return false;
                    }
                });

            }
        };

        mBlogList.setAdapter(firebaseRecyclerAdapter);
    }

    public static class BlogViewHolder extends RecyclerView.ViewHolder {
        View mView;

        public BlogViewHolder(final View itemView) {
            super(itemView);
            mView = itemView;

            itemView.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    itemView.startAnimation(AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_out));
                    return false;
                }
            });

            itemView.startAnimation(AnimationUtils.loadAnimation(itemView.getContext(), R.anim.zoom_in));

        }

//        public void setTitle(String title) {
//            TextView post_title = mView.findViewById(R.id.imagetitle);
//            post_title.setText(title);
//        }

        public void setImageURL(final Context ctx, String imageURL) {
            ImageView img = mView.findViewById(R.id.projectImage);
            Picasso.with(ctx)
                    .load(imageURL)
                    .fit()
                    .centerCrop()
                    .placeholder(R.drawable.ic_launcher_foreground)
                    .into(img);
        }
    }
}